<?xml version="1.0" encoding="UTF-8"?>  
<b:beans xmlns="http://www.springframework.org/schema/security" 
    xmlns:b="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">  
 
  <!--登录页面不过滤 -->  
  	<http pattern="/index.jsp" security="none" />
    <http pattern="/view/login.jsp" security="none" />   
    <http pattern="/system/login/logout" security="none" />
    <http pattern="/toAccessDenied.do" security="none" />
    <http pattern="/toLogin.do" security="none" />   
    
    <http access-denied-page="/toAccessDenied.do">  
        <form-login login-page="/toLogin.do" 
        	always-use-default-target="true"
        	default-target-url="/sys/login/toIndex"
        />
        
        <logout logout-url="/logout"  logout-success-url="/system/login/logout"/>
        
        <session-management>  
            <concurrency-control max-sessions="1" 
                error-if-maximum-exceeded="false" />  
        </session-management>  
        <!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->  
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />  
        
     	<!-- 跨域访问  -->
     	<custom-filter ref="corsHandler" after="HEADERS_FILTER"/>
    </http>
      
    
    <!-- 跨域访问设置类 -->
    <b:bean id="corsHandler" class="com.sys.filter.CorsFilter" ></b:bean>
    
    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，   
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->  
    <b:bean id="myFilter" 
        class="com.sys.filter.MyFilterSecurityInterceptor">  
        <!-- 用户拥有的权限 -->
        <b:property name="authenticationManager" ref="authenticationManager" />  
        <!-- 用户是否拥有所请求资源的权限 -->
        <b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />  
        <!-- 资源和权限的对应关系  -->
        <b:property name="securityMetadataSource" ref="securityMetadataSource" />  
    </b:bean>  
    
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->  
    <authentication-manager alias="authenticationManager">  
	    <authentication-provider user-service-ref="myUserDetailService">  
	       <!--如果用户的密码采用加密的话<password-encoder hash="md5" />        -->
	     </authentication-provider>  
    </authentication-manager>  
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->  
    <b:bean id="myUserDetailService" class="com.sys.filter.MyUserDetailService" />  
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->  
    <b:bean id="myAccessDecisionManagerBean"   class="com.sys.filter.MyAccessDecisionManager">  
    </b:bean>
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->  
    <b:bean id="securityMetadataSource"   class="com.sys.filter.MyInvocationSecurityMetadataSource" >
    	
    </b:bean>   
 	
 	<b:bean id="loginSuccessHandler" class="com.sys.web.controller.login.LoginSuccessHandler"></b:bean>
 
 
 </b:beans>